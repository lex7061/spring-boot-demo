<?xml version="1.0" encoding="UTF-8"?>
<!-- 声明规范 -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!-- pom模型版本，maven2和3只能为4.0.0 -->
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.xkcoding</groupId>
  <artifactId>spring-boot-demo</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <!--  项目打包方式，有以下值：pom, jar, maven-plugin, ejb, war, ear, rar, par-->
  <packaging>pom</packaging>
  <!--  当前项目所包含的所有模块-->
  <modules>
    <module>demo-helloworld</module>
    <module>demo-properties</module>
    <module>demo-actuator</module>
    <module>demo-admin</module>
    <module>demo-logback</module>
    <module>demo-log-aop</module>
    <module>demo-exception-handler</module>
    <module>demo-template-freemarker</module>
    <module>demo-template-thymeleaf</module>
    <module>demo-template-beetl</module>
    <module>demo-template-enjoy</module>
    <module>demo-orm-jdbctemplate</module>
    <module>demo-orm-jpa</module>
    <module>demo-orm-mybatis</module>
    <module>demo-orm-mybatis-mapper-page</module>
    <module>demo-orm-mybatis-plus</module>
    <module>demo-orm-beetlsql</module>
    <module>demo-upload</module>
    <module>demo-cache-redis</module>
    <module>demo-cache-ehcache</module>
    <module>demo-email</module>
    <module>demo-task</module>
    <module>demo-task-quartz</module>
    <module>demo-task-xxl-job</module>
    <module>demo-swagger</module>
    <module>demo-swagger-beauty</module>
    <module>demo-rbac-security</module>
    <module>demo-rbac-shiro</module>
    <module>demo-session</module>
    <module>demo-oauth</module>
    <module>demo-social</module>
    <module>demo-zookeeper</module>
    <module>demo-mq-rabbitmq</module>
    <module>demo-mq-rocketmq</module>
    <module>demo-mq-kafka</module>
    <module>demo-websocket</module>
    <module>demo-websocket-socketio</module>
    <module>demo-ureport2</module>
    <module>demo-uflo</module>
    <module>demo-urule</module>
    <module>demo-activiti</module>
    <module>demo-async</module>
    <module>demo-dubbo</module>
    <module>demo-war</module>
    <module>demo-elasticsearch</module>
    <module>demo-mongodb</module>
    <module>demo-neo4j</module>
    <module>demo-docker</module>
    <module>demo-multi-datasource-jpa</module>
    <module>demo-multi-datasource-mybatis</module>
    <module>demo-sharding-jdbc</module>
    <module>demo-tio</module>
    <module>demo-codegen</module>
    <module>demo-graylog</module>
    <module>demo-ldap</module>
    <module>demo-dynamic-datasource</module>
    <module>demo-ratelimit-guava</module>
    <module>demo-ratelimit-redis</module>
    <module>demo-elasticsearch-rest-high-level-client</module>
    <module>demo-https</module>
    <module>demo-flyway</module>
    <module>demo-pay</module>
  </modules>

  <name>spring-boot-demo</name>
  <url>http://xkcoding.com</url>

  <!--  用于确定父项目的坐标位置。-->
  <!--  <parent>-->
  <!--    <groupId>com.xx</groupId>-->
  <!--    <artifactId>SIP-parent</artifactId>-->
  <!--  Maven首先在当前项目中找父项目的pom，然后在文件系统的这个位置（relativePath），然后在本地仓库，再在远程仓库找。 -->
  <!--    <relativePath></relativePath>-->
  <!--    <version>0.0.1-SNAPSHOT</version>-->
  <!--  </parent>-->

  <!--  用于定义pom常量-->
  <properties>
    <!--    这个常量可以在pom文件的任意地方通过${xx.xx}来引用-->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <spring.boot.version>2.1.0.RELEASE</spring.boot.version>
    <mysql.version>8.0.21</mysql.version>
    <hutool.version>5.4.5</hutool.version>
    <guava.version>29.0-jre</guava.version>
    <user.agent.version>1.20</user.agent.version>
  </properties>

  <!-- 依赖和扩展的远程仓库列表 -->
  <repositories>
    <repository>
      <id>aliyun</id>
      <name>aliyun</name>
      <url>https://maven.aliyun.com/repository/public</url>
      <!--   releases, snapshots:这是各种构件的策略   POM就可以根据独立仓库任意类型的依赖改变策略-->
      <releases>
        <enabled>true</enabled>
        <!--updatePolicy: 这个元素决定更新频率。maven将比较本地pom的时间戳（存储在仓库的maven数据文件中）和远程的.
            有以下选择: always, daily (默认), interval:X (x是代表分钟的整型) ， never.-->
        <!--        <updatePolicy>never</updatePolicy>-->
        <!-- checksumPolicy：当Maven向仓库部署文件的时候，它也部署了相应的校验和文件。
        可选的为：ignore，fail，warn，或者不正确的校验和-->
        <!--        <checksumPolicy>fail</checksumPolicy>-->
      </releases>
      <snapshots>
        <enabled>false</enabled>
        <!--        <updatePolicy>never</updatePolicy>-->
        <!--        <checksumPolicy>fail</checksumPolicy>-->
      </snapshots>
    </repository>
  </repositories>

  <!--
   1、<dependencyManagement><dependencies>......</dependencies></dependencyManagement>
   在父模块中定义后，子模块不会直接使用对应依赖，但是在使用相同依赖的时候可以不加版本号,
   这样的好处是，父项目统一了版本，而且子项目可以在需要的时候才引用对应的依赖。
   2、<dependencies>......<dependencies/>
   父项目直接使用dependencies管理依赖，如果在父项目写的依赖，会被子项目引用。一般会在父项目中定义子项目中所有共用的依赖。
   -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring.boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>${mysql.version}</version>
      </dependency>
      <!-- hutool工具类 -->
      <dependency>
        <groupId>cn.hutool</groupId>
        <artifactId>hutool-all</artifactId>
        <version>${hutool.version}</version>
      </dependency>
      <!-- guava工具类 -->
      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>${guava.version}</version>
      </dependency>
      <!-- 解析 UserAgent 信息 -->
      <dependency>
        <groupId>eu.bitwalker</groupId>
        <artifactId>UserAgentUtils</artifactId>
        <version>${user.agent.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置-->
    <pluginManagement>
      <!--使用的插件列表 。-->
      <plugins>
        <!--plugin元素包含描述插件所需要的信息。-->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.0.0</version>
          <!--          &lt;!&ndash;项目引入插件所需要的额外依赖&ndash;&gt;-->
          <!--          <dependencies>-->
          <!--            &lt;!&ndash;参见dependencies/dependency元素&ndash;&gt;-->
          <!--            <dependency>-->
          <!--              ......-->
          <!--            </dependency>-->
          <!--          </dependencies>-->
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.20.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${spring.boot.version}</version>
          <executions>
            <execution>
              <goals>
                <goal>repackage</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
